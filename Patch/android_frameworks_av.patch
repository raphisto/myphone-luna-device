From 2dc5c9ed39ea241ea2a3baa319f6290135f477b7 Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Sat, 30 Jul 2016 01:54:21 +0200
Subject: [PATCH] Add mtk FMRadio support

Change-Id: I2da5139d71f4afe5a4c3f0f9b43cb44d516fbd18
---
 include/media/MediaPlayerInterface.h               |   3 +
 media/libmediaplayerservice/Android.mk             |   5 +
 media/libmediaplayerservice/FMAudioPlayer.h        | 144 +++++++++++++++++++++
 media/libmediaplayerservice/MediaPlayerFactory.cpp |  25 ++++
 4 files changed, 177 insertions(+)
 create mode 100644 media/libmediaplayerservice/FMAudioPlayer.h

diff --git a/include/media/MediaPlayerInterface.h b/include/media/MediaPlayerInterface.h
index 2ef68cd84..086c37f4d 100644
--- a/include/media/MediaPlayerInterface.h
+++ b/include/media/MediaPlayerInterface.h
@@ -53,6 +53,9 @@ enum player_type {
     // argument to the 'test:' url in the setDataSource call.
     TEST_PLAYER = 5,
     DASH_PLAYER = 6,
+#ifdef MTK_HARDWARE
+    FM_AUDIO_PLAYER = 7,
+#endif
 };
 
 
diff --git a/media/libmediaplayerservice/Android.mk b/media/libmediaplayerservice/Android.mk
index d556ec9eb..b9347a624 100644
--- a/media/libmediaplayerservice/Android.mk
+++ b/media/libmediaplayerservice/Android.mk
@@ -73,6 +73,11 @@ LOCAL_C_INCLUDES :=                                                 \
     $(TOP)/frameworks/av/media/libavextensions                      \
     $(TOP)/frameworks/av/media/libstagefright/mpeg2ts               \
 
+# Mediatek
+ifeq ($(strip $(BOARD_HAS_MTK_HARDWARE)),true)
+LOCAL_SHARED_LIBRARIES += libmtkplayer
+endif
+
 LOCAL_CFLAGS += -Werror -Wno-error=deprecated-declarations -Wall
 # DOLBY_START
 ifeq ($(strip $(DOLBY_ENABLE)),true)
diff --git a/media/libmediaplayerservice/FMAudioPlayer.h b/media/libmediaplayerservice/FMAudioPlayer.h
new file mode 100644
index 000000000..0f239d452
--- /dev/null
+++ b/media/libmediaplayerservice/FMAudioPlayer.h
@@ -0,0 +1,144 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein
+ * is confidential and proprietary to MediaTek Inc. and/or its licensors.
+ * Without the prior written permission of MediaTek inc. and/or its licensors,
+ * any reproduction, modification, use or disclosure of MediaTek Software,
+ * and information contained herein, in whole or in part, shall be strictly prohibited.
+ */
+/* MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
+ * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
+ * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
+ * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
+ * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
+ * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
+ * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
+ * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
+ * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
+ * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
+ * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
+ * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
+ * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek Software")
+ * have been modified by MediaTek Inc. All revisions are subject to any receiver's
+ * applicable license agreements with MediaTek Inc.
+ */
+
+#ifndef ANDROID_FM_AUDIOPLAYER_H
+#define ANDROID_FM_AUDIOPLAYER_H
+
+
+#include <utils/threads.h>
+
+#include <media/MediaPlayerInterface.h>
+#include <media/AudioTrack.h>
+#include <media/AudioRecord.h>
+
+namespace android
+{
+
+class FMAudioPlayer : public MediaPlayerInterface
+{
+public:
+    FMAudioPlayer();
+    ~FMAudioPlayer();
+
+    virtual void        onFirstRef();
+    virtual status_t    initCheck();
+    //virtual status_t    setDataSource(const char *path, const KeyedVector<String8, String8> *headers);
+    virtual status_t    setDataSource(const sp<IMediaHTTPService> &httpService, const char *url, const KeyedVector<String8, String8> *headers);
+    virtual status_t    setDataSource(int fd, int64_t offset, int64_t length);
+    virtual status_t    setVideoSurface(const sp<Surface>& /*surface*/)
+    {
+        return UNKNOWN_ERROR;
+    }
+    virtual status_t    setVideoSurfaceTexture(
+        const sp<IGraphicBufferProducer>& /*bufferProducer*/)
+    {
+        return UNKNOWN_ERROR;
+    }
+    virtual status_t    prepare();
+    virtual status_t    prepareAsync();
+    virtual status_t    start();
+    virtual status_t    stop();
+    virtual status_t    seekTo(int msec);
+    virtual status_t    pause();
+    virtual bool        isPlaying();
+    virtual status_t    getCurrentPosition(int *msec);
+    virtual status_t    getDuration(int *msec);
+    virtual status_t    release();
+    virtual status_t    reset();
+    virtual status_t    setLooping(int loop);
+#ifndef FAKE_FM
+    virtual status_t    setRender(bool enable);
+#endif
+    virtual player_type playerType()
+    {
+        return FM_AUDIO_PLAYER;
+    }
+    virtual status_t    invoke(const Parcel &/*request*/, Parcel */*reply*/)
+    {
+        return INVALID_OPERATION;
+    }
+    virtual status_t    setParameter(int /*key*/, const Parcel &/*request*/)
+    {
+        return INVALID_OPERATION;
+    }
+    virtual status_t    getParameter(int /*key*/, Parcel */*reply*/)
+    {
+        return INVALID_OPERATION;
+    }
+
+private:
+    status_t    setdatasource(const char *path, int fd, int64_t offset, int64_t length);
+    status_t    reset_nosync();
+    status_t    createOutputTrack();
+    static int  renderThread(void *);
+    int         render();
+    bool        createAudioRecord();
+    bool        deleteAudioRecord();
+
+#ifndef FAKE_FM
+    void        setHwCallback(bool enable);
+#endif
+
+    sp<AudioRecord>      mAudioRecord;
+    Mutex               mMutex;
+    Condition           mCondition;
+    FILE               *mFile;
+    int64_t             mOffset;
+    int64_t             mLength;
+    char               *mAudioBuffer;
+    char               *mDummyBuffer;
+    int                 mPlayTime;
+    int                 mDuration;
+    uint32_t            mFmAudioSamplingRate;
+
+    status_t            mState;
+    int                 mStreamType;
+    bool                mAndroidLoop;
+    volatile bool       mExit;
+    bool                mPaused;
+		
+    bool		mSetRender;
+    volatile bool       mRender;
+    pid_t               mRenderTid;
+    bool 		flagRecordError;
+
+    int mMutePause;
+};
+
+}; // namespace android
+
+#endif
+
+
diff --git a/media/libmediaplayerservice/MediaPlayerFactory.cpp b/media/libmediaplayerservice/MediaPlayerFactory.cpp
index 864dce259..7c1acac93 100644
--- a/media/libmediaplayerservice/MediaPlayerFactory.cpp
+++ b/media/libmediaplayerservice/MediaPlayerFactory.cpp
@@ -34,6 +34,10 @@
 #include "nuplayer/NuPlayerDriver.h"
 #include <mediaplayerservice/AVMediaServiceExtensions.h>
 
+#ifdef MTK_HARDWARE
+#include "FMAudioPlayer.h"
+#endif
+
 namespace android {
 
 Mutex MediaPlayerFactory::sLock;
@@ -241,6 +245,24 @@ class TestPlayerFactory : public MediaPlayerFactory::IFactory {
     }
 };
 
+#ifdef MTK_HARDWARE
+class FMPlayerFactory : public MediaPlayerFactory::IFactory {
+  public:
+    virtual float scoreFactory(const sp<IMediaPlayer>& /*client*/,
+                               const char* url,
+                               float /*curScore*/) {
+        if(strncmp(url, "MEDIATEK://MEDIAPLAYER_PLAYERTYPE_FM", 36) == 0)
+           return 1.0;
+        return 0.0;
+    }
+
+    virtual sp<MediaPlayerBase> createPlayer(pid_t /* pid */) {
+        ALOGV("Create FM Player");
+        return new FMAudioPlayer();
+    }
+};
+#endif
+
 void MediaPlayerFactory::registerBuiltinFactories() {
 
     MediaPlayerFactory::IFactory* pCustomFactory = NULL;
@@ -256,6 +278,9 @@ void MediaPlayerFactory::registerBuiltinFactories() {
         ALOGV("Registering DASH_PLAYER");
         registerFactory_l(pCustomFactory, DASH_PLAYER);
     }
+#ifdef MTK_HARDWARE
+    registerFactory_l(new FMPlayerFactory(), FM_AUDIO_PLAYER);
+#endif
 
     sInitComplete = true;
 }

From bc23b26453ab38a430fc6d4580a7277e8f37dd3a Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Fri, 22 Apr 2016 22:52:01 +0200
Subject: [PATCH] Fix FM volume control

Change-Id: Ie56820e540e738f0fcd14276dcda89f199166d65
---
 services/audioflinger/AudioFlinger.cpp | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 9244e5b10..b4f830de7 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -1049,6 +1049,18 @@ status_t AudioFlinger::setStreamVolume(audio_stream_type_t stream, float value,
         thread->setStreamVolume(stream, value);
     }
 
+#ifdef MTK_HARDWARE
+    // MTK FM Volume
+    if(stream == AUDIO_STREAM_MUSIC) {
+        sp<ThreadBase> thread;
+        thread = checkPlaybackThread_l(output);
+        if (thread == primaryPlaybackThread_l()) {
+            audio_hw_device_t *dev = mPrimaryHardwareDev->hwDevice();
+            dev->set_parameters (dev, String8::format("SetFmVolume=%f", value));
+        }
+    }
+#endif
+
     return NO_ERROR;
 }
