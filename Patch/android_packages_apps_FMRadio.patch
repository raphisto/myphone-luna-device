From 6514abdebab3451259eb6079c4f9f64e4d4f7476 Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Sat, 30 Jul 2016 01:20:34 +0200
Subject: [PATCH] Add support for mtk fm player

---
 src/com/android/fmradio/FmMainActivity.java |  2 +-
 src/com/android/fmradio/FmService.java      | 95 ++++++++++++++++++++++++++---
 2 files changed, 86 insertions(+), 11 deletions(-)

diff --git a/src/com/android/fmradio/FmMainActivity.java b/src/com/android/fmradio/FmMainActivity.java
index 82db51b..fcf2f02 100644
--- a/src/com/android/fmradio/FmMainActivity.java
+++ b/src/com/android/fmradio/FmMainActivity.java
@@ -1023,7 +1023,7 @@ private void refreshPlayButton(boolean enabled) {
 
     private void refreshPopupMenuItem(boolean enabled) {
         if (null != mMenuItemStationlList) {
-            mMenuItemStartRecord.setEnabled(enabled);
+            mMenuItemStartRecord.setEnabled(false); // force disable start recording menu item
         }
     }
 
diff --git a/src/com/android/fmradio/FmService.java b/src/com/android/fmradio/FmService.java
index c336397..1d7e0ef 100644
--- a/src/com/android/fmradio/FmService.java
+++ b/src/com/android/fmradio/FmService.java
@@ -46,6 +46,7 @@
 import android.media.AudioSystem;
 import android.media.AudioTrack;
 import android.media.MediaRecorder;
+import android.media.MediaPlayer;
 import android.net.Uri;
 import android.os.Binder;
 import android.os.Bundle;
@@ -62,6 +63,7 @@
 
 import com.android.fmradio.FmStation.Station;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -178,7 +180,7 @@
     private Context mContext = null;
     private AudioManager mAudioManager = null;
     private ActivityManager mActivityManager = null;
-    //private MediaPlayer mFmPlayer = null;
+    private MediaPlayer mFmPlayer = null;
     private WakeLock mWakeLock = null;
     // Audio focus is held or not
     private boolean mIsAudioFocusHeld = false;
@@ -1283,6 +1285,11 @@ public void onCreate() {
         mWakeLock.setReferenceCounted(false);
         sRecordingSdcard = FmUtils.getDefaultStoragePath();
 
+        if (!initFmPlayer()) {
+            Log.e(TAG, "FMPlayer init failed");
+            return;
+        }
+
         registerFmBroadcastReceiver();
         registerSdcardReceiver();
         registerAudioPortUpdateListener();
@@ -1299,6 +1306,62 @@ public void onCreate() {
         createRenderThread();
     }
 
+    private boolean initFmPlayer() {
+        mFmPlayer = new MediaPlayer();
+        mFmPlayer.setWakeMode(FmService.this, PowerManager.PARTIAL_WAKE_LOCK);
+        mFmPlayer.setOnErrorListener(mPlayerErrorListener);
+        try {
+            mFmPlayer.setDataSource("MEDIATEK://MEDIAPLAYER_PLAYERTYPE_FM");
+        } catch (Exception ex) {
+            Log.e(TAG, "setDataSource: " + ex);
+            return false;
+        }
+        mFmPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
+        return true;
+    }
+
+    /**
+     * Handle FM Player error
+     */
+    private final MediaPlayer.OnErrorListener mPlayerErrorListener =
+            new MediaPlayer.OnErrorListener() {
+                /**
+                 * handle error message
+                 *
+                 * @param mp occurred error media player
+                 * @param what error message
+                 * @param extra error message extra
+                 *
+                 * @return handle error message or not
+                 */
+                public boolean onError(MediaPlayer mp, int what, int extra) {
+                    if (MediaPlayer.MEDIA_ERROR_SERVER_DIED == what) {
+                        Log.d(TAG, "onError: MEDIA_SERVER_DIED");
+                        if (mFmPlayer != null) {
+                            mFmPlayer.release();
+                            mFmPlayer = null;
+                        }
+                        mFmPlayer = new MediaPlayer();
+                        mFmPlayer.setWakeMode(FmService.this, PowerManager.PARTIAL_WAKE_LOCK);
+                        mFmPlayer.setOnErrorListener(mPlayerErrorListener);
+                        try {
+                            mFmPlayer.setDataSource("MEDIATEK://MEDIAPLAYER_PLAYERTYPE_FM");
+                            mFmPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
+                            if (mPowerStatus == POWER_UP) {
+                                setSpeakerPhoneOn(mIsSpeakerUsed);
+                                mFmPlayer.prepare();
+                                mFmPlayer.start();
+                            }
+                        } catch (Exception ex) {
+                            Log.e(TAG, "setDataSource: " + ex);
+                            return false;
+                        }
+                    }
+
+                    return true;
+                }
+            };
+
     private void registerAudioPortUpdateListener() {
         if (mAudioPortUpdateListener == null) {
             mAudioPortUpdateListener = new FmOnAudioPortUpdateListener();
@@ -1680,18 +1743,24 @@ private void setLRText(String lrtText) {
      * @param enable true, open FM audio; false, close FM audio;
      */
     private void enableFmAudio(boolean enable) {
-        if (enable) {
-            if ((mPowerStatus != POWER_UP) || !mIsAudioFocusHeld) {
-                Log.d(TAG, "enableFmAudio, current not available return.mIsAudioFocusHeld:"
-                    + mIsAudioFocusHeld);
+        if ((mFmPlayer == null) || mPowerStatus != POWER_UP) {
+            return;
+        }
+
+        try {
+            if (!enable) {
+                if (!mFmPlayer.isPlaying()) return;
+
+                mFmPlayer.stop();
                 return;
             }
 
-            startAudioTrack();
-            startPatchOrRender();
-        } else {
-            releaseAudioPatch();
-            stopRender();
+            if (mFmPlayer.isPlaying()) return;
+
+            mFmPlayer.prepareWithoutScan();
+            mFmPlayer.start();
+        } catch (Exception e) {
+            Log.e(TAG, "Exception: ", e);
         }
     }
 
@@ -2428,6 +2497,12 @@ public void handleMessage(Message msg) {
                     powerDown();
                     closeDevice();
 
+                    // release FMPlayer
+                    if (mFmPlayer != null) {
+                        mFmPlayer.release();
+                        mFmPlayer = null;
+                    }
+
                     bundle = new Bundle(1);
                     bundle.putInt(FmListener.CALLBACK_FLAG, FmListener.MSGID_FM_EXIT);
                     notifyActivityStateChanged(bundle);
